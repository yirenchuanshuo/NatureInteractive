#include "/Engine/Private/Common.ush"

struct FWindMotorData
{
	//MotorCommonData
	float Radius;
	float Strength;

	//MotorTickData
	float3 PreviousWorldPosition;
	float3 WorldPosition;
	float3 MoveVelocity;
};

Texture3D<float> WindFieldSourceXPrevious;
Texture3D<float> WindFieldSourceYPrevious;
Texture3D<float> WindFieldSourceZPrevious;
RWTexture3D<float> WindFieldSourceXOutput;
RWTexture3D<float> WindFieldSourceYOutput;
RWTexture3D<float> WindFieldSourceZOutput;
float3 WindFieldWorldPosition;
float UnitSize;
float DeltaTime;
uint MotorNum;


StructuredBuffer<FWindMotorData> WindMotorBuffer;

[numthreads(SIZE_X,SIZE_Y,SIZE_Z)]
void WindFieldAddSourceCS(uint3 ThreadId : SV_DispatchThreadID)
{
	float XForce = WindFieldSourceXPrevious[ThreadId];
	float YForce = WindFieldSourceYPrevious[ThreadId];
	float ZForce = WindFieldSourceZPrevious[ThreadId];
	
	float3 Position = ThreadId.xyz * UnitSize + WindFieldWorldPosition;

	for(uint i=0;i<MotorNum;i++)
	{
		float3 ForceDir = normalize(Position - WindMotorBuffer[i].WorldPosition);
		float ForceLength = length(Position - WindMotorBuffer[i].WorldPosition);
		float ForceFalloff = 1 - saturate(ForceLength / WindMotorBuffer[i].Radius);
		//float IsIncident = select(ForceLength<WindMotorBuffer[i].Radius, 1, 0);
		float3 OutVelocity = select(ForceLength<WindMotorBuffer[i].Radius,ForceDir*WindMotorBuffer[i].Strength  * ForceFalloff,float3(0,0,0));

		XForce += OutVelocity.x * DeltaTime;
		YForce += OutVelocity.y * DeltaTime;
		ZForce += OutVelocity.z * DeltaTime;
	}

	WindFieldSourceXOutput[ThreadId] = XForce ;
	WindFieldSourceYOutput[ThreadId] = YForce ;
	WindFieldSourceZOutput[ThreadId] = ZForce ;
}