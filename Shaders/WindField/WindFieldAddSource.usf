#include "/Engine/Private/Common.ush"

Texture3D<float> WindFieldSourceXPrevious;
Texture3D<float> WindFieldSourceYPrevious;
Texture3D<float> WindFieldSourceZPrevious;
RWTexture3D<float> WindFieldSourceXOutput;
RWTexture3D<float> WindFieldSourceYOutput;
RWTexture3D<float> WindFieldSourceZOutput;
float3 WindFieldWorldPosition;
float3 MotorWorldPosition;
float3 HalfFieldSize;
float MotorIncidence;
float UnitSize;
float3 MotorForce;

[numthreads(SIZE_X,SIZE_Y,SIZE_Z)]
void WindFieldAddSourceCS(uint3 ThreadId : SV_DispatchThreadID)
{
	float XForce = WindFieldSourceXPrevious[ThreadId];
	float YForce = WindFieldSourceYPrevious[ThreadId];
	float ZForce = WindFieldSourceZPrevious[ThreadId];
	
	float3 Position = ThreadId.xyz * UnitSize + WindFieldWorldPosition;
	Position.xy -= HalfFieldSize.xy;
	float3 ForceDir = Position - MotorWorldPosition;
	float DistanceBetween = distance(Position, MotorWorldPosition);
	float IsIncident = select(DistanceBetween<MotorIncidence, 1, 0);
	float3 OutVelocity = select(DistanceBetween<MotorIncidence,MotorForce,float3(0,0,0));
	
	
	WindFieldSourceXOutput[ThreadId] = XForce*(1-IsIncident) + OutVelocity.x;
	WindFieldSourceYOutput[ThreadId] = YForce*(1-IsIncident) + OutVelocity.y;
	WindFieldSourceZOutput[ThreadId] = ZForce*(1-IsIncident) + OutVelocity.z;
	
}